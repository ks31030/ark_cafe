package com.example.cafe.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.example.cafe.model.Cafe;
import com.example.cafe.service.CafeService;

@Controller
@RequestMapping("/cafes")
public class CafeController {
	private final CafeService cafeService;
	@Autowired
	public CafeController(CafeService cafeService) {
		this.cafeService = cafeService;
	}
	@GetMapping()
	public String getAllCafes(Model model, @RequestParam(required=false) String name) {
		/*
		@RequestParam(required=false) : 파라미터를 필수로 적어주지 않아도 됨.
		@RequestParam http 요청으로 파라미터를 메서드의 매개변수로 전달할 때
		클라이언트가 웹 애플리케이션에 보내는 요청의 파라미터 값을 받아서 처리하는 데 사용.
		
		@PathVariable과 @RequestParam의 차이
			@PathVariable : URL 경로에서 변수값을 추출. url/cafes{id}
			@RequestParam : 한 경로 안에서 클라이언트가 요청한 파라미터값을 추출.
				url/cafe?name=사용자가 폼에 입력한 값.
		*/	
		
		//카페리스트를 만들어준 후 
		//만약에 리스트에서 카페가 존재한다면 그 카페목록들만 보여주고
		//만약에 존재하지 않는다면 그냥 모든 카페 내용을 보여주겠다
		List<Cafe> cafes;
		if(name!=null && !name.isEmpty()) {
			cafes = cafeService.findCafes(name);
			//-> 사람들이 검색한 카페 내용을 service에서 가져와서 뿌린 다음에 cafes에 넣어버리겠다.
		} else {
			cafes = cafeService.getAllCafes();
			//->모든 카페 리스트를 보여주겠다.
		}
		
		model.addAttribute("cafes", cafes);
		return "cafeList";
	}
	@GetMapping("/details/{cafeId}")
	public String getCafeDetails(@PathVariable Long cafeId, Model model) {
		Optional<Cafe> cafe = cafeService.getCafeById(cafeId);
		cafe.ifPresent(value -> model.addAttribute("cafe", value));
		return "cafeDetail";
	}
	@GetMapping("/new")
	public String showCafeForm(Model model) {
		model.addAttribute("cafe", new Cafe());
		return "cafeForm";
	}
	@PostMapping("/save")
	public String saveCafe(@ModelAttribute Cafe cafe) {
		cafeService.saveCafe(cafe);
		return "redirect:/cafes";
	}
	@GetMapping("/update/{cafeId}")
	public String updateCafe(@PathVariable Long cafeId, Model model) {
		Optional<Cafe> cafe = cafeService.getCafeById(cafeId);
		cafe.ifPresent(value -> model.addAttribute("cafe",value));
		return "cafeForm";
	}
	@GetMapping("/delete/{cafeId}")
	public String deleteCafe(@PathVariable Long cafeId) {
		cafeService.deleteCafeById(cafeId);
		return "redirect:/cafes";
	}
	//GetMapping을 활용해서 count 해준 location를 갖고 오기
	@GetMapping("/count/{location}")
	public String countCafesByLocation(@PathVariable String location, Model model) {
		int cafeCount = cafeService.countCafesByLocation(location);
		//1. 지역값을 저장할 모델
		//2. 지역 갯수를 저장해줄 모델.
		model.addAttribute("location", location);
		model.addAttribute("cafeCount", cafeCount);
		return "cafeCount";
	}
	//카페가 존재하는지 확인 여부
	@GetMapping("/exists/{name}")
	public String existsCafeByName(@PathVariable String name, Model model) {
		boolean cafeExists = cafeService.existsCafeByName(name);
		model.addAttribute("cafeExists", cafeExists);
		return "cafeExists";
	}

}
package com.kh.springdb.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;
import com.kh.springdb.model.Product;
import com.kh.springdb.repository.ProductRepository;
import lombok.RequiredArgsConstructor;
import java.io.File;
import java.io.IOException;
import java.util.List;

@Service
@RequiredArgsConstructor
public class ProductService {

    @Autowired
    private ProductRepository productRepository;

    public List<Product> getAllProducts() {
        return productRepository.findAll();
    }

    public Page<Product> getProductsByPage(int page) {
        Pageable pageable = PageRequest.of(page, 3, Sort.by("createDate").descending());
        return productRepository.findAll(pageable);
    }

    public void saveProduct(Product product, MultipartFile imgFile) throws IllegalStateException, IOException {
        String originName = imgFile.getOriginalFilename();
        String projectPath = System.getProperty("user.dir") + "/src/main/resources/static/img/";
        File saveFile = new File(projectPath, originName);
        imgFile.transferTo(saveFile);
        product.setImgName(originName);
        product.setImgPath("/img/" + originName);
        productRepository.save(product);
    }

    public Product getProductById(int id) {
        return productRepository.findProductById(id);
    }

    public void deleteProductById(int id) {
        productRepository.deleteById(id);
    }

    public void likeProduct(int productId) {
        Product product = productRepository.findById(productId).orElse(null);
        if (product != null) {
            product.setLikes(product.getLikes() + 1);
            productRepository.save(product);
        }
    }
}

package com.kh.springdb.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import com.kh.springdb.model.Product;
import com.kh.springdb.service.CommentService;
import com.kh.springdb.service.ProductService;
import lombok.RequiredArgsConstructor;

@Controller
@RequiredArgsConstructor
public class ProductController {

    @Autowired
    private ProductService productService;

    @GetMapping("/")
    public String mainPageView(Model model) {
        return "index";
    }

    @GetMapping("/product/list")
    public String pageList(Model model, @RequestParam(value = "page", defaultValue = "0") int page) {
        Page<Product> paging = productService.getList(page);
        model.addAttribute("paging", paging);
        return "product_List";
    }
	
	//상품 등록 페이지 - 조회
	@GetMapping("/product/new")
	public String productSaveForm(Model model) {
		model.addAttribute("product", new Product());
		return "addProductForm";
	}
	
	//등록된 상품 업로드 페이지
	@PostMapping("/product/new")
	public String productSave(Product product, MultipartFile imgFile) throws IllegalStateException, IOException {	
		productService.saveProduct(product, imgFile);
		return "redirect:/product/list"; 
		//상품 리스트 페이지로 변경해서 상품 등록 후 이동하는 경로를 바꿔줄 수 있음
	}
	
	//상품 클릭했을 때 상세보기 메서드
	@GetMapping("/product/detail/{id}")
	public String productDetail(@PathVariable("id") int id, Model model) {
		//상세보기를 검색할 조건
		//하나의 아이디 값을 가지고 와서 지정된 제품을 모든 내용을 보여줄 수 있도록 함
		Product product = productService.getProductById(id); 
		//model.addAttribute("product", product) 는
		//      "product" templates 밑에서 thymeleaf로 불러올 변수명을 product로 지정
		//	Product product	만들어준 필드명을 가지고와서 service로 불러온 내용을 	
		// "product" 안에 저장해준다는 의미
		model.addAttribute("product", product);
		return "product_detail";
	}
	
	//상품 삭제하기
	@GetMapping("/product/delete/{id}")
	public String productDelete(@PathVariable int id) {
		productService.deleteProductById(id);
		return "redirect:/product/list";
	}
	
	//상품 수정하기
	@GetMapping("/product/update/{id}")
	public String productUpdate(@PathVariable int id, Model model) {
		//상세보기를 검색할 조건
		Product product = productService.getProductById(id);
		//하나의 아이디 값을 가지고 와서 그 아이디가 속해있는 데이터를 product안에 저장한다는 의미
		model.addAttribute("product",product);
		return "updateProductForm";
	}
	
	private final CommentService commentService = new CommentService();
	
	//댓글 작성
	@PostMapping("/addComment")
	public String addComment(@RequestParam int productId, @RequestParam String commentContent) {
		commentService.addComment(productId, commentContent);
		return "redirect:/product/detail/" + productId;
	}
	
	//댓글 삭제
	@GetMapping("/deleteComment/{productId}")
	public String deleteComment(@PathVariable Long productId) {
		commentService.deleteComment(productId);
		return "redirect:/product/list";
	}
	
	//like 한 내용 받아줄 수 있게 PostMapping
	
	
}